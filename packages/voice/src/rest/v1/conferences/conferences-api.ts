import {
  CalloutRequest,
  GetCalloutResponseObj,
  GetConferenceInfoResponse,
  ManageConferenceParticipantRequest,
} from '../../../models/';
import {
  RequestBody,
  SinchClientParameters,
} from '@sinch/sdk-client';
import { VoiceApi } from '../voice-api';

export interface GetConferenceInfoRequestData {
  /** The unique identifier of the conference. The user sets this value. */
  'conferenceId': string;
}
export interface KickConferenceAllRequestData {
  /** The unique identifier of the conference. The user sets this value. */
  'conferenceId': string;
}
export interface KickConferenceParticipantRequestData {
  /** The unique identifier of the call. This value is generated by the system. */
  'callId': string;
  /** The unique identifier of the conference. The user sets this value. */
  'conferenceId': string;
}
export interface ManageConferenceParticipantRequestData {
  /** The unique identifier of the call. This value is generated by the system. */
  'callId': string;
  /** The unique identifier of the conference. The user sets this value. */
  'conferenceId': string;
  /**  */
  'manageConferenceParticipantRequestBody'?: ManageConferenceParticipantRequest;
}
export interface ConferenceCalloutsRequestData {
  /**  */
  'calloutRequestBody'?: CalloutRequest;
}

export class ConferencesApi extends VoiceApi {

  /**
   * Initialize your interface
   *
   * @param {SinchClientParameters} sinchClientParameters - The parameters used to initialize the API Client.
   */
  constructor(sinchClientParameters: SinchClientParameters) {
    super(sinchClientParameters, 'ConferencesApi');
  }

  /**
   * Get Conference Info
   * Returns information about a conference that matches the provided conference ID.
   * @param { GetConferenceInfoRequestData } data - The data to provide to the API call.
   */
  public async getConferenceInfo(data: GetConferenceInfoRequestData): Promise<GetConferenceInfoResponse> {
    this.client = this.getSinchClient();
    const getParams = this.client.extractQueryParams<GetConferenceInfoRequestData>(data, [] as never[]);
    const headers: { [key: string]: string | undefined } = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const body: RequestBody = '';
    const basePathUrl = `${this.client.apiClientOptions.basePath}/calling/v1/conferences/id/${data['conferenceId']}`;

    const requestOptions = await this.client.prepareOptions(basePathUrl, 'GET', getParams, headers, body);
    const url = this.client.prepareUrl(requestOptions.basePath, requestOptions.queryParams);

    return this.client.processCall<GetConferenceInfoResponse>({
      url,
      requestOptions,
      apiName: this.apiName,
      operationId: 'GetConferenceInfo',
    });
  }

  /**
   * Kick Conference All
   * Removes all participants from a conference.
   * @param { KickConferenceAllRequestData } data - The data to provide to the API call.
   */
  public async kickConferenceAll(data: KickConferenceAllRequestData): Promise<void> {
    this.client = this.getSinchClient();
    const getParams = this.client.extractQueryParams<KickConferenceAllRequestData>(data, [] as never[]);
    const headers: { [key: string]: string | undefined } = {
      'Content-Type': 'application/json',
      'Accept': '',
    };

    const body: RequestBody = '';
    const basePathUrl = `${this.client.apiClientOptions.basePath}/calling/v1/conferences/id/${data['conferenceId']}`;

    const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body);
    const url = this.client.prepareUrl(requestOptions.basePath, requestOptions.queryParams);

    return this.client.processCall<void>({
      url,
      requestOptions,
      apiName: this.apiName,
      operationId: 'KickConferenceAll',
    });
  }

  /**
   * Kick Conference Participant
   * Remove a specified conference participant from a specified conference.
   * @param { KickConferenceParticipantRequestData } data - The data to provide to the API call.
   */
  public async kickConferenceParticipant(data: KickConferenceParticipantRequestData): Promise<void> {
    this.client = this.getSinchClient();
    const getParams = this.client.extractQueryParams<KickConferenceParticipantRequestData>(data, [] as never[]);
    const headers: { [key: string]: string | undefined } = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const body: RequestBody = '';
    const basePathUrl = `${this.client.apiClientOptions.basePath}/calling/v1/conferences/id/${data['conferenceId']}/${data['callId']}`;

    const requestOptions = await this.client.prepareOptions(basePathUrl, 'DELETE', getParams, headers, body);
    const url = this.client.prepareUrl(requestOptions.basePath, requestOptions.queryParams);

    return this.client.processCall<void>({
      url,
      requestOptions,
      apiName: this.apiName,
      operationId: 'KickConferenceParticipant',
    });
  }

  /**
   * Manage Conference Participant
   * Manages conference participant in a specified conference: * mute / unmute * put on hold / resume.
   * @param { ManageConferenceParticipantRequestData } data - The data to provide to the API call.
   */
  public async manageConferenceParticipant(data: ManageConferenceParticipantRequestData): Promise<void> {
    this.client = this.getSinchClient();
    const getParams = this.client.extractQueryParams<ManageConferenceParticipantRequestData>(data, [] as never[]);
    const headers: { [key: string]: string | undefined } = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const body: RequestBody = data['manageConferenceParticipantRequestBody']
      ? JSON.stringify(data['manageConferenceParticipantRequestBody']) : '{}';
    const basePathUrl = `${this.client.apiClientOptions.basePath}/calling/v1/conferences/id/${data['conferenceId']}/${data['callId']}`;

    const requestOptions = await this.client.prepareOptions(basePathUrl, 'PATCH', getParams, headers, body);
    const url = this.client.prepareUrl(requestOptions.basePath, requestOptions.queryParams);

    return this.client.processCall<void>({
      url,
      requestOptions,
      apiName: this.apiName,
      operationId: 'ManageConferenceParticipant',
    });
  }

  /**
   * Callout Request
   * Makes a call out to a phone number. The types of callouts currently supported are conference callouts, text-to-speech callouts, and custom callouts. The custom callout is the most flexible, but text-to-speech and conference callouts are more convenient.
   * @param { CalloutsRequestData } data - The data to provide to the API call.
   */
  public async callouts(data: ConferenceCalloutsRequestData): Promise<GetCalloutResponseObj> {
    this.client = this.getSinchClient();
    const getParams = this.client.extractQueryParams<ConferenceCalloutsRequestData>(data, [] as never[]);
    const headers: { [key: string]: string | undefined } = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const body: RequestBody = data['calloutRequestBody'] ? JSON.stringify(data['calloutRequestBody']) : '{}';
    const basePathUrl = `${this.client.apiClientOptions.basePath}/calling/v1/callouts`;

    const requestOptions = await this.client.prepareOptions(basePathUrl, 'POST', getParams, headers, body);
    const url = this.client.prepareUrl(requestOptions.basePath, requestOptions.queryParams);

    return this.client.processCall<GetCalloutResponseObj>({
      url,
      requestOptions,
      apiName: this.apiName,
      operationId: 'Callouts',
    });
  }

}
